{"version":3,"sources":["../src/utils.ts","../src/hook.ts","../src/plugin.ts"],"sourcesContent":["import {\n    RO_Sitemap,\n    RouteDefinitions,\n    RouteDefinition,\n    Sitemap,\n    UserAgentDirective,\n} from \"./types\";\nimport fs from \"fs\";\n\nexport const encodeXML = (str: string) => {\n    return str\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&apos;\");\n};\n\nexport const generateSitemap = <S extends RO_Sitemap>(\n  definitions: RouteDefinitions<S>,\n  baseUrl: string,\n  sitemap: S\n) => {\n  // Instantiate a routes object with all the static routes\n  // The will be override if you pass custom settings\n  const routes: Record<string, RouteDefinition<boolean>> = Object.keys(\n    sitemap\n  ).reduce((acc, route) => {\n    const isDynamic = route.includes(\"[\");\n    if (!isDynamic) {\n      Object.assign(acc, {\n        [route]: {\n          path: route,\n        } as RouteDefinition<boolean>,\n      });\n    }\n    return acc;\n  }, {});\n\n  // Add custom route data to the routes object\n  Object.entries(sitemap).forEach(([route]) => {\n    const RouteDefinition = definitions[route as keyof typeof definitions];\n\n    if (RouteDefinition) {\n      if (Array.isArray(RouteDefinition)) {\n        RouteDefinition.forEach((definition) => {\n          if (!definition) return;\n\n          Object.assign(routes, { [definition.path]: definition });\n        });\n      } else {\n        Object.assign(routes, {\n          [RouteDefinition?.path || route]: RouteDefinition,\n        });\n      }\n    }\n  });\n\n  // Build and return sitemap\n  // refs : https://github.com/sveltejs/kit/issues/1142#issuecomment-1032407693 https://github.com/Shopify/hydrogen/blob/1de3864214d04d9214e323d7f0a953c7b9309b7b/templates/demo-store/src/routes/sitemap.xml.server.ts\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n${Object.entries(routes)\n  .filter(([_, v]) => v)\n  .map(([r, def]) => {\n    if (!def) return ``;\n    const { path, changeFreq, image, lastMod, priority } = def;\n\n    return `  <url>\n    <loc>${baseUrl}${path || r}</loc>\n  \n  ${lastMod ? `<lastmod>${lastMod}</lastmod>` : \"\"}\n  ${priority ? `<priority>${priority}</priority>` : \"\"}\n  ${changeFreq ? `<changefreq>${changeFreq}</changefreq>` : \"\"}\n  ${\n    image\n      ? `\n    <image:image>\n      <image:loc>${encodeXML(image.url)}</image:loc>\n      <image:title>${encodeXML(image.title ?? \" \")}</image:title>\n      <image:caption>${encodeXML(image.altText ?? \" \")}</image:caption>\n    </image:image>`\n      : \"\"\n  }\n  </url>\n  `;\n  })\n  .join(\"\\n\")}\n</urlset>`;\n};\n\nexport const generateRobots = <S extends RO_Sitemap>(\n  robots: boolean | UserAgentDirective<S> | UserAgentDirective<S>[],\n  baseUrl: string\n) => {\n  // Instantiate the agents to render array\n  const agentsToRender: {\n    agent: string;\n    crawlDelay?: number;\n    allow: string[];\n    disallow: string[];\n  }[] = [];\n\n  const parseAgent = (agent: UserAgentDirective<S>) => {\n    const infos = Object.entries(agent.paths).reduce<{\n      allow: string[];\n      disallow: string[];\n    }>(\n      (acc, [route, allow]) => {\n        if (allow) {\n          acc.allow.push(route);\n        } else {\n          acc.disallow.push(route);\n        }\n        return acc;\n      },\n      { allow: [], disallow: [] }\n    );\n\n    // Use the same config for all the user agents\n    if (Array.isArray(agent.userAgent)) {\n      agent.userAgent.forEach((a) => {\n        agentsToRender.push({\n          agent: a,\n          crawlDelay: agent.crawlDelay,\n          ...infos,\n        });\n      });\n    } else {\n      agentsToRender.push({\n        agent: agent.userAgent || \"*\",\n        crawlDelay: agent.crawlDelay,\n        ...infos,\n      });\n    }\n  };\n\n  // Build a default robot.txt for all user-agents\n  if (typeof robots === \"boolean\") {\n    agentsToRender.push({\n      agent: \"*\",\n      allow: robots === true ? [\"/\"] : [],\n      disallow: robots === false ? [\"/\"] : [],\n    });\n  } else if (!Array.isArray(robots)) {\n    parseAgent(robots);\n  } else {\n    robots.forEach(parseAgent);\n  }\n\n  return `${agentsToRender\n    .map(({ agent, crawlDelay, allow, disallow }) =>\n      `User-agent: ${agent}\nSitemap: ${baseUrl}/sitemap.xml\n${crawlDelay ? `Crawl-delay: ${crawlDelay}` : \"\"}\n${allow.map((route) => `Allow: ${route}`).join(\"\\n\")}\n${disallow.map((route) => `Disallow: ${route}`).join(\"\\n\")}\n`\n        // Make it pretty\n        .replace(/\\n\\n/g, \"\\n\")\n        .replace(/\\n\\n/g, \"\\n\")\n    )\n    .join(\"\\n\")}\n`.trim();\n};\n\n// function to recursively traverse a directory and return if some of the files are named +page.svelte\nconst hasPageInside = (path: string): boolean => {\n  const files = fs.readdirSync(path);\n  if (files.some((file) => file === \"+page.svelte\")) return true;\n  return files.some((file: string) => {\n    const newPath = path + \"/\" + file;\n    if (fs.statSync(newPath).isDirectory()) {\n      return hasPageInside(newPath);\n    } else {\n      return false;\n    }\n  });\n};\n\nexport const getRoutes = (dir: string): Sitemap => {\n  let routes: Sitemap = {};\n  const traverseRoutes = (path: string) => {\n    const isDirectory = fs.statSync(path).isDirectory();\n    const isPageFolder = isDirectory && hasPageInside(path);\n    if (isDirectory && isPageFolder) {\n      fs.readdirSync(path).forEach((file) => traverseRoutes(path + \"/\" + file));\n    }\n\n    const id = path.replace(dir, \"\").replace(\"/+page.svelte\", \"\");\n\n    const dirBase = path.replace(\"/+page.svelte\", \"\");\n\n    const isFolder =\n      fs.statSync(dirBase).isDirectory() &&\n      fs.readdirSync(path.replace(\"/+page.svelte\", \"\")).some((p) => {\n        return fs.statSync(dirBase + \"/\" + p).isDirectory();\n      });\n\n    if (!id.includes(\"/api\") && !dir.includes(\"/api\"))\n      Object.assign(routes, {\n        [id || \"/\"]: isFolder,\n      });\n  };\n  fs.readdirSync(dir).forEach(\n    (file) => !dir.includes(\"/api\") && traverseRoutes(dir + \"/\" + file)\n  );\n\n  return routes;\n};\n","import { type Handle } from \"@sveltejs/kit\";\nimport type { SitemapParams, RO_Sitemap } from \"./types\";\nimport { generateRobots, generateSitemap } from \"./utils\";\n\nexport const sitemapHook =\n    <S extends RO_Sitemap>(sitemap: S, params: SitemapParams<S> | undefined = {}): Handle =>\n    async ({ event, resolve }) => {\n        if (event.url.host.startsWith(\"www.\")) {\n            return new Response(null, {\n                status: 301,\n                headers: {\n                    location: event.url.href.replace(\"//www.\", \"//\"),\n                },\n            });\n        }\n\n        if (event.url.pathname === \"/sitemap.xml\") {\n            // Get dynamic custom definition for app routes\n            const routeDefinitions = params.getRoutes ? await params.getRoutes(event) : {};\n            return new Response(generateSitemap(routeDefinitions, event.url.origin, sitemap), {\n                status: 200,\n                headers: {\n                    \"Content-Type\": \"application/xml\",\n                },\n            });\n        }\n\n        if (event.url.pathname === \"/robots.txt\") {\n            // Get dynamic robots directives\n            const robots = params.getRobots ? await params.getRobots(event) : true;\n\n            // Build and return the robots.txt\n            return new Response(generateRobots<S>(robots, event.url.origin), {\n                headers: {\n                    \"content-type\": \"text/plain\",\n                    // Cache it for 24 hours\n                    \"cache-control\": `max-age=${60 * 60 * 24}`,\n                },\n            });\n        }\n\n        return resolve(event);\n    };\n","import fs from \"fs\";\nimport type { ViteDevServer } from \"vite\";\nimport { SitemapPluginParams } from \"./types\";\nimport { getRoutes } from \"./utils\";\n\nexport const sitemapPlugin = ({\n  routesDir = \"./src/routes\",\n  sitemapFile = \"./src/sitemap.ts\"\n}: SitemapPluginParams = {}) => {\n  function updateSitemap() {\n    fs.writeFileSync(\n      sitemapFile,\n      `import type { RO_Sitemap } from '@fayez-nazzal/sveltekit-sitemap';\n\nexport const sitemap = (<const>${JSON.stringify(\n        getRoutes(routesDir),\n        null,\n        3\n      ).replace(/\\uFFFF/g, '\\\\\"')}) satisfies RO_Sitemap\n\nexport type Sitemap = typeof sitemap\n`\n    );\n  }\n  updateSitemap();\n\n  return {\n    name: \"@fayez-nazzal/sveltekit-sitemap\",\n    configureServer(server: ViteDevServer) {\n      server.watcher\n        .on(\"add\", updateSitemap)\n        .on(\"unlink\", updateSitemap)\n        .on(\"unlinkDir\", updateSitemap);\n    },\n  };\n};\n"],"mappings":"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","names":["fs","encodeXML","str","generateSitemap","definitions","baseUrl","sitemap","routes","acc","route","RouteDefinition","definition","_","v","r","def","_a","_b","path","changeFreq","image","lastMod","priority","generateRobots","robots","agentsToRender","parseAgent","agent","infos","allow","a","__spreadValues","crawlDelay","disallow","hasPageInside","files","fs","file","newPath","getRoutes","dir","traverseRoutes","isDirectory","isPageFolder","id","dirBase","isFolder","sitemapHook","sitemap","params","_0","__async","event","resolve","routeDefinitions","generateSitemap","robots","generateRobots","fs","sitemapPlugin","routesDir","sitemapFile","updateSitemap","fs","getRoutes","server"]}